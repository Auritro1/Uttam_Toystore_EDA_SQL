-- Creating tables
-- Inventory_ds
DROP TABLE inventory;
CREATE TABLE inventory(
	Store_ID INT NOT NULL,	
	Product_ID INT,
	Stock_On_Hand INT
);
SELECT * FROM inventory;

-- Products_ds 
DROP TABLE IF EXISTS products;
CREATE TABLE products(
	Product_ID INT NOT NULL PRIMARY KEY,
	Product_Name VARCHAR(30),
	Product_Category VARCHAR(30),
	Product_Cost FLOAT,
	Product_Price FLOAT
);
SELECT * FROM products;

-- Sales_ds
DROP TABLE IF EXISTS sales;
CREATE TABLE sales(
	Sale_ID	INT NOT NULL PRIMARY KEY,
	Sale_Date DATE,
	Store_ID INT,
	Product_ID	INT,
	Units INT
);
'''SELECT DISTINCT Sale_Date FROM sales; '''

-- Stores_ds
DROP TABLE IF EXISTS stores;
CREATE TABLE stores(
	Store_ID INT NOT NULL PRIMARY KEY,
	Store_Name VARCHAR(55),
	Store_City VARCHAR(20),
	Store_Location VARCHAR(20),
	Store_Open_Date	DATE
);

-- Answer to the questions
-- 1. What is the total sales revenue generated by each store?
SELECT 
	s2.Store_ID, 
	s2.Store_Name,
	ROUND(SUM(p.Product_Price*s1.units):: NUMERIC, 2) AS Total_revenue
FROM stores s2
JOIN sales s1 ON s2.Store_ID = s1.Store_ID
JOIN products p ON s1.Product_ID = p.Product_ID
GROUP BY s2.Store_ID, s2.Store_Name;

-- 2.  Which products have the highest revenue contribution in each product category?
WITH category_revenue AS(
	SELECT
		p1.Product_Category,
		p1.Product_Name,
		ROUND(SUM(p1.Product_Price*s1.Units)::NUMERIC,2) AS Revenue_per_Product
	FROM products p1 
	JOIN sales s1 ON p1.Product_ID = s1.Product_ID
	GROUP BY p1.Product_Category, p1.Product_Name
)
SELECT
	c1.Product_Category,
	c1.Product_Name,
	c1.Revenue_per_Product
FROM category_revenue c1
WHERE Revenue_per_Product = 
	(SELECT MAX(Revenue_per_Product) FROM category_revenue c2 WHERE c1.Product_Category = c2.Product_Category);


-- 3. What is the sales performance by product category?
SELECT 
	p.Product_Category,
	SUM(s1.Units) AS Total_Units_Sold,
	ROUND(SUM(p.Product_Price*s1.Units)::NUMERIC, 2) AS Total_Revenue,
	ROUND(AVG(p.Product_Price)::NUMERIC, 2) AS Average_Selling_Price,
	ROUND(SUM((Product_Price-Product_cost)*s1.Units)::NUMERIC, 2) AS Total_profit
FROM products p
JOIN sales s1 ON p.Product_ID = s1.Product_ID
GROUP BY p.Product_Category;


-- 4. What are the current inventory levels for each product at each store?
SELECT 
	s.Store_ID,
	s.Store_Name,
	p.Product_ID,
	p.Product_Name,
	i.Stock_On_Hand
FROM stores s
JOIN inventory i ON s.Store_ID = i.Store_ID
JOIN products p ON i.Product_ID = p.Product_ID;


-- 5. How do monthly sales trends vary across different stores?
SELECT 
	s2.Store_ID,
	s2.Store_Name,
	TO_CHAR(s1.Sale_Date, 'month YYYY') AS Sale_Month,
	SUM(s1.Units) AS Total_Units_Sold,
	ROUND(SUM(p.Product_Price*s1.Units)::NUMERIC, 2) AS Total_Revenue
FROM stores s2
JOIN sales s1 ON s2.Store_ID = s1.Store_ID
JOIN products p ON s1.Product_ID = p.Product_ID
GROUP BY s2.Store_ID, s2.Store_Name, TO_CHAR(s1.Sale_Date, 'month YYYY')
ORDER BY s2.Store_ID, MIN(s1.Sale_Date);


-- 6. Which stores have the highest and lowest sales performance?
-- Lowest sales
SELECT 
	s2.Store_ID,
	s2.Store_Name,
	ROUND(SUM(p.Product_Price*s1.Units)::NUMERIC, 2) AS Total_Revenue,
	SUM(s1.Units) AS Total_Units_Sold
FROM stores s2 
JOIN sales s1 ON s2.Store_ID = s1.Store_ID
JOIN products p ON s1.Product_ID = p.Product_ID
GROUP BY s2.Store_ID, s2.Store_Name
ORDER BY Total_Revenue ASC LIMIT 1;
-- Highest sales
SELECT 
	s2.Store_ID,
	s2.Store_Name,
	ROUND(SUM(p.Product_Price*s1.Units)::NUMERIC, 2) AS Total_Revenue,
	SUM(s1.Units) AS Total_Units_Sold
FROM stores s2 
JOIN sales s1 ON s2.Store_ID = s1.Store_ID
JOIN products p ON s1.Product_ID = p.Product_ID
GROUP BY s2.Store_ID, s2.Store_Name
ORDER BY Total_Revenue DESC LIMIT 1;


-- 7. What is the profit margin for each product?
SELECT
	p.Product_ID,
	p.Product_Name,
	ROUND(((SUM((p.Product_Price-p.Product_Cost)*s1.Units)/SUM(p.Product_Price*s1.Units))*100)::NUMERIC, 2) 
	AS Profit_Margin
FROM products p
JOIN sales s1 ON p.Product_ID = s1.Product_ID
GROUP BY p.Product_ID;


-- 8. What is the average revenue per store in each city?
SELECT 
	s3.Store_City,
	ROUND(AVG(s3.Total_Revenue_per_Store)::NUMERIC, 2) AS Average_Revenue
FROM (
	SELECT
		s2.Store_City,
		s2.Store_ID,
		s2.Store_Name,
		SUM(p.Product_Price*s1.Units) AS Total_Revenue_per_Store
	FROM stores s2
	JOIN sales s1 ON s2.Store_ID = s1.Store_ID
	JOIN products p ON s1.Product_ID = p.Product_ID
	GROUP BY s2.Store_City, s2.Store_ID
) AS s3
GROUP BY s3.Store_City;


-- 9.  Which products are out of stock in each store?
SELECT
	s2.Store_ID,
	s2.Store_Name,
	p.Product_Name
FROM stores s2
JOIN inventory i ON s2.Store_ID = i.Store_ID
JOIN products p ON i.Product_ID = p.Product_ID
WHERE stock_on_hand IS NULL or stock_on_hand = 0
GROUP BY s2.Store_ID, s2.Store_Name, p.Product_Name
ORDER BY Store_ID;

-- 10. What is the highest revenue day for each store and product category?
WITH Daily_Revenue AS(
	SELECT
		s2.Store_ID,
		s2.Store_Name,
		p.Product_Category,
		s1.Sale_Date,
		ROUND(SUM(p.Product_Price*s1.Units)::NUMERIC,2) AS Total_Revenue
	FROM stores s2
	JOIN sales s1 ON s2.Store_ID = s1.Store_ID
	JOIN products p ON s1.Product_ID = p.Product_ID
	GROUP BY s2.Store_ID, s2.Store_Name, p.Product_Category, s1.Sale_Date
)
SELECT DISTINCT ON(d.Store_ID, d.Product_Category)
	d.Store_ID,
	d.Store_Name,
	d.Product_Category,
	d.Sale_Date AS Highest_Revenue_Day,
	d.Total_Revenue
FROM Daily_Revenue d
ORDER BY d.Store_ID, d.Product_Category, d.Total_Revenue DESC;


-- 11. What is the overall profit generated by each product category across all stores?
SELECT
	p.Product_Category,
	ROUND(SUM((p.Product_Price-p.Product_Cost)*s1.Units)::NUMERIC, 2) AS overall_profit_generated
FROM products p 
JOIN sales s1 ON p.Product_ID = s1.Product_ID
GROUP BY p.Product_Category
ORDER BY overall_profit_generated DESC;


-- 12. What is the percentage distribution of total sales by store?
WITH Store_Revenue AS(
	SELECT 
		s2.Store_ID,
		s2.Store_Name,
		ROUND(SUM(p.Product_Price*s1.Units)::NUMERIC,2) AS Revenue
	FROM stores s2 
	JOIN sales s1 ON s2.Store_ID = s1.Store_ID
	JOIN products p ON s1.Product_ID = p.Product_ID
	GROUP BY s2.Store_ID
),
Total_Revenue AS(
	SELECT SUM(Revenue) AS Grand_Total_Revenue FROM Store_Revenue
)
SELECT 
	sr.Store_ID,
	sr.Store_Name,
	sr.Revenue AS Store_Revenue,
	ROUND((sr.Revenue/tr.Grand_Total_Revenue)*100,2) AS Percentage_Distribution
FROM Store_Revenue sr JOIN Total_Revenue tr ON true
ORDER BY Percentage_Distribution DESC;


-- 13. What is the percentage distribution of total sales by category?
WITH Category_Revenue AS(
	SELECT 
		p.Product_Category,
		ROUND(SUM(p.Product_Price*s1.Units)::NUMERIC,2) AS Revenue
	FROM sales s1
	JOIN products p ON s1.Product_ID = p.Product_ID
	GROUP BY p.Product_Category
),
Total_Revenue AS(
	SELECT SUM(Revenue) AS Grand_Total_Revenue FROM Category_Revenue
)
SELECT 
	cr.Product_Category,
	cr.Revenue AS Category_Revenue,
	ROUND((cr.Revenue/tr.Grand_Total_Revenue)*100,2) AS Percentage_Distribution
FROM Category_Revenue cr JOIN Total_Revenue tr ON true
ORDER BY Percentage_Distribution DESC;



















